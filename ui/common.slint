export global AppService  {
    // This callback can be implemented in native code using the Slint API
    pure callback open-file();
    pure callback get-recent-files() -> [{path: string, name: string}];
    pure callback open-recent-file(string);

}

export global BackendTextEditor {
    pure callback save-file(string, string);
    pure callback read-file(string) -> string;
    pure callback open-text-file() -> string;
    pure callback set-font-size(string, int) -> int;
}

export global BackendPDF {
    pure callback navigate-previous();
    pure callback display() -> image;
    pure callback navigate-next();
}

export component Page inherits Rectangle {
    // in property <string> header <=> h.text;
    // in property <bool> has-back-button: false;

    // callback back;
    // // Stop accidentally getting clicks dur to animation only moving page half way offscreen
    // visible: self.opacity > 0;

    // TouchArea { } // protect underneath controls


    // if (root.has-back-button) : Image {
    //     x:0;
    //     source: @image-url("images/back.svg");
    //     image-fit: contain;
    //     y: h.y + (h.height - self.height) / 2;
    //     width: 14px;
    //     height: 24px;

    //     TouchArea {
    //         clicked => { root.back() }

    //         x:0;
    //         width: 150%;
    //     }
    // }

    // h := Text {
    //     font-weight: 900;
    //     y: 46px - self.font-size;
    //     x: root.has-back-button ? 24px + 16px : 0px;
    //     // Allow clicking on the title as well to get back easier when just
    //     // using fingers on a small screen.
    //     if (root.has-back-button) : TouchArea {
    //         clicked => { root.back() }
    //     }
    // }
}

export component CustomButton inherits Rectangle {
    in-out property text <=> txt.text;
    callback clicked <=> touch.clicked;
    in-out property font-size <=> txt.font-size;
    border-radius: root.height / 5;
    border-width: 1px;
    border-color: root.background.darker(25%);
    background: touch.pressed ? #6b8282 : touch.has-hover ? #6c616c :  #456;
    height: txt.preferred-height * 1.33;
    min-width: txt.preferred-width + 20px;
    txt := Text {
        x: (parent.width - self.width)/2;
        y: (parent.height - self.height)/2;
        color: touch.pressed ? #fff : #eee;
    }
    touch := TouchArea { }
}