import { Palette, Switch } from "std-widgets.slint";

struct ButtonColors  {
    border: color,
    base: color,
    pressed: color,
    hovered: color,
}

struct ModeColors {
    background: color,
    primary: color,
    secondary: color,
    text-primary: color,
    text-secondary: color,
    destructive: color,
}

export global PDFerPalette  {
    // in property <bool> dark-mode: Palette.color-scheme == ColorScheme.dark;
    in-out property <bool> dark-mode: false;


    property <ModeColors> light-mode-colors: {
        background: #E0DDCF,
        primary: #EFFBF0,
        secondary: #BAB5B5,
        text-primary: #000,
        text-secondary: #2D232E,
        destructive: #FF3B30,
    };

    property <ModeColors> dark-mode-colors: {
        background: #1A1F24,
        primary: #0A0A0A,
        secondary: #151415,
        text-primary: #E0DDCF,
        text-secondary: #F1F0EA,
        destructive: #F55D3E,
    };

    out property <color> background: dark-mode ? dark-mode-colors.background : light-mode-colors.background;
    out property <color> primary: dark-mode ? dark-mode-colors.primary : light-mode-colors.primary;
    out property <color> secondary: dark-mode ? dark-mode-colors.secondary : light-mode-colors.secondary;
    out property <color> text-primary: dark-mode ? dark-mode-colors.text-primary : light-mode-colors.text-primary;
    out property <color> text-secondary: dark-mode ? dark-mode-colors.text-secondary : light-mode-colors.text-secondary;
    out property <color> destructive: dark-mode ? dark-mode-colors.destructive : light-mode-colors.destructive;

    out property <length> base-font-size: 16px;
    out property <length> button-width: 130px;
    out property <length> button-height: button-width + 30px;
    out property <length> side-bar-width: 1000px;
    out property <length> side-bar-margin: 500px;
    out property <length> page-border-width: 10px;

    out property <color> primary-push-button-base: background;
    out property <color> button-border: black;
    out property <ButtonColors> primary-push-button-colors: {
        border: button-border,
        base: primary,
        pressed: secondary.darker(20%),
        hovered: secondary,
    };
}

export component CustomButton inherits Rectangle {
    in-out property text <=> txt.text;
    callback clicked <=> touch.clicked;
    in-out property font-size <=> txt.font-size;
    border-radius: root.height / 3.5;
    border-width: 5px;
    border-color: PDFerPalette.primary-push-button-colors.border;
    background: touch.pressed ? PDFerPalette.primary-push-button-colors.pressed : touch.has-hover ? PDFerPalette.primary-push-button-colors.hovered :  PDFerPalette.primary-push-button-colors.base;
    animate background {
        duration: 100ms;
        easing: ease-out-quad;
    }
    min-width: txt.preferred-width + 5px;
    txt := Text {
        x: (parent.width - self.width)/2;
        y: (parent.height - self.height)/2;
        color: touch.pressed ? PDFerPalette.text-primary : PDFerPalette.text-secondary;
    }
    touch := TouchArea { }
}

export global AppService  {
    // This callback can be implemented in native code using the Slint API
    pure callback open-file();
    pure callback get-recent-files() -> [{path: string, name: string}];
    pure callback get-num-recent-files() -> int;
    pure callback open-recent-file(string);
    pure callback trim-file-name(string) -> string;
}

export global BackendTextEditor {
    pure callback save-file(string, string);
    pure callback read-file(string) -> string;
    pure callback open-text-file() -> string;
    pure callback set-font-size(string, int) -> int;
}

export global BackendPDF {
    pure callback open-pdf(string);
}

export component Page inherits Rectangle {
    // in property <string> header <=> h.text;
    // in property <bool> has-back-button: false;

    // callback back;
    // // Stop accidentally getting clicks dur to animation only moving page half way offscreen
    // visible: self.opacity > 0;

    // TouchArea { } // protect underneath controls


    // if (root.has-back-button) : Image {
    //     x:0;
    //     source: @image-url("images/back.svg");
    //     image-fit: contain;
    //     y: h.y + (h.height - self.height) / 2;
    //     width: 14px;
    //     height: 24px;

    //     TouchArea {
    //         clicked => { root.back() }

    //         x:0;
    //         width: 150%;
    //     }
    // }

    // h := Text {
    //     font-weight: 900;
    //     y: 46px - self.font-size;
    //     x: root.has-back-button ? 24px + 16px : 0px;
    //     // Allow clicking on the title as well to get back easier when just
    //     // using fingers on a small screen.
    //     if (root.has-back-button) : TouchArea {
    //         clicked => { root.back() }
    //     }
    // }
}

